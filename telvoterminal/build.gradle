apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.3"
    defaultConfig {
        applicationId "telvoterminal.telvo.com.terminal"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        release {
            useProguard true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    File propFile = file('keystoreinfo.properties');
    if (propFile.exists()) {
        Properties props = new Properties();
        props.load(propFile.newDataInputStream())

        if (props.containsKey('STORE_FILE') && props.containsKey('KEY_ALIAS') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props.getProperty('STORE_FILE'))
            android.signingConfigs.release.storePassword = props.getProperty('STORE_PASSWORD')
            android.signingConfigs.release.keyAlias = props.getProperty('KEY_ALIAS')
            android.signingConfigs.release.keyPassword = props.getProperty('KEY_PASSWORD')
        } else {
            android.buildTypes.release.signingConfigs = null
        }
    } else {
        android.buildTypes.release.signingConfigs = null
    }

    applicationVariants.all { variant ->
        changeApkFileName(variant)
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.android.support:design:26.+'
    compile 'com.android.support:support-v4:26.+'
    compile 'com.mikhaellopez:circularimageview:3.0.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:recyclerview-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.braintreepayments.api:braintree:2.+'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.hbb20:ccp:2.0.3'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.journeyapps:zxing-android-embedded:3.2.0@aar'
    compile 'com.android.support:cardview-v7:26.+'
    compile 'com.google.android.gms:play-services-vision:11.8.0'
    compile 'com.google.firebase:firebase-core:11.8.0'
    compile 'com.google.firebase:firebase-messaging:11.8.0'
    compile 'com.github.kenglxn.QRGen:android:2.3.0'
    compile 'com.theartofdev.edmodo:android-image-cropper:2.5.+'
    compile 'me.dm7.barcodescanner:zxing:1.8.4'
    compile 'testfairy:testfairy-android-sdk:1.+@aar'
    compile 'id.zelory:compressor:2.1.0'
    compile 'com.google.firebase:firebase-perf:11.8.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MMM-dd", TimeZone.getTimeZone("UTC"))
}

def changeApkFileName(variant) {
    variant.outputs.all { output ->
        def file = output.outputFile

        def newName = rootProject.projectName + '_v ' + rootProject.versionCode + '@' + releaseTime() + '_' + variant.buildType.name + '.apk'
        output.outputFileName = new File(file.parent, newName)
    }
}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'